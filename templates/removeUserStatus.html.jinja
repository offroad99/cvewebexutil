{% extends "base.html.jinja" %}
{% block content %}
<div class="col-12 col-lg-9 col-xl-10">
    <div class="cveSection">
        <div class="row">
            <div class="col-xl-8">
                <div class="panel panel--loose panel--raised base-margin-bottom">
                    <h2 class="subtitle">Remove User From Room Status: <span id='startTime'></span></h2>
                    <hr>
                    <div class="cveSection">
                        <div class="cveRow">
                            <p>This is the latest output: <span id="latest"></span></p>
                        </div>
                        <br>
                        <div class="cveRow">
                            <p>This is all the output:</p>
                            <br>
                            <div class="cveRow">
                                <ul id="output"></ul>
                            </div>
                        </div>
                    </div>
                </div>
            </div>
        </div>
    </div>
</div>

<script>
    const myStartTime = new Date(); 
    document.getElementById("startTime").innerHTML = myStartTime.toLocaleTimeString();
    var latest = document.getElementById('latest');
    var output = document.getElementById('output');
    var position = 0;

    function handleNewData(theXhr) {
            // the response text include the entire response so far
            // split the messages, then take the messages that haven't been handled yet
            // position tracks how many messages have been handled
            // messages end with a newline, so split will always show one extra empty message at the end
            console.log("running handlenewdata with position: " + position)
            const d = new Date();
            let timeString = d.toLocaleTimeString();
            var messages = theXhr.responseText.split('\n');
            messages.slice(position, -1).forEach(function(value) {
                varLocalValue = value.replace(/\s/g, '')
                if (varLocalValue.length > 1) {
                    latest.textContent = value;  // update the latest value in place
                    // build and append a new item to a list to log all output
                    var item = document.createElement('li');
                    item.textContent = timeString + ': ' + value;
                    output.appendChild(item);
                }
            });
            position = messages.length - 1;
        }
    
    $(document).ready(function(){
            $.ajax({
                url: "{{ url_for('removeUserStatus')}}",
                method: "get",
                xhr: function(){
                    // get the native XmlHttpRequest object
                    var myXhr = $.ajaxSettings.xhr();
                    // set the onprogress event handler
                    myXhr.onprogress = function(){ 
                        console.log('about to call handlenewdata from onprogress');
                        handleNewData(myXhr); 
                    };
                    return myXhr
                }
            })
            .always (function(jqXHROrData, textStatus, jqXHROrErrorThrown) {
                //alert('status: ' + textStatus, 'jqXHROrData:' + jqXHROrData);
            })
            .done (function(data, textStatus, jqXHR) { 
                handleNewData(jqXHR);
                latest.textContent = "Done";
                alert("Success: " + textStatus);
            })
        });
</script>

{% endblock %}